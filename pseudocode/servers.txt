var isTail; // boolean value
var isHead; // boolean value
var master; //used to ping to the clint ever second using UDP 
var predecessor; // address of server
var successor; //address of server
var history initially {};
var responses initially {};

enum Outcome { Processed, InconsistentWithHistory, InsufficientFunds }

class Reply {
  string reqID;
  Outcome outcome;
  float balance;
}

event predecessorFailure(newPredessor) from master:
	if newPredessor == NULL:
		isHead = TRUE;
		//STUFF needs to be added here definitely
	else:	
		predecessor = newPredecessor;

event successorFailure(newSuccessor) from master:
	if newSuccessor = NULL:
		isTail = TRUE;
		//STUFF needs to be added here definitely		
	else:	
		successor = newSuccessor;

event 

function sendPing(): return boolean
	send (IP address) to master;
	if SUCCESS:
		return true;
	else:
		return false;

funciton getBalance(reqID, accoutNum): return <reqID, Outcome, balance>
	// In theory this method should only be called on the Tail server by clients
	var balance = -1;
	if history.contains(reqID) != true:
		balance = getBalance(accountNum);
		Reply newEntry = Reply(reqID, Processed, balance);
		history.add(newEntry);
		return < reqID, Processed, balance >;
	else:
		return < reqID, InconsistentWithHistory, balance>

function deposit(reqID, accountNum, amount): return < reqID, Outcome, balance>
	var balance = -1;
	if history.contains(reqID) != true:
		balance = getBalance(accountNum);
		Reply newEntry = Reply(reqID, Processed, balance);
		history.add(newEntry);
		balance = balance + amount;
		updateBalance(accountNum, balance);
		return <reqId, Processed, balance>
	else:
		Reply obj = history.find(reqID);// response obj
		if(obj.balance == amount):
			return <reqID, Processed, balance>
		else:
			return <reqID, InconsistentWithHistory, balance>

 function withdraw(reqID, accountNum, amount): return <reqID, Outcome, balance>
 	var balance = -1;
 	Reply newEntry
 	if history.contains(reqID) != true:
 		balance = getBalance(accountNum);
 		history.add(newEntry);
 		if (balance = balance - amount ) > 0:
 			updateBalance(accountNum, balance);
 			newEntry = Reply(reqID, Processed, balanced);
 		else: 
 			newEntry = Reply(reqID, InsufficientFunds, balanced);
 		
 		return newEntry;
 	else:
 		Reply obj = history.find(reqID);
 		if(obj.balance == amount):
 			return obj
 		else:

 			return <reqID, InconsistentWithHistory, balance>