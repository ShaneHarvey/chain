import logging

const = import_da('const')


class Master(process):

    """
    Master monitors all banks to detect failures and handle chain updates.

    Master handles join chain requests, failure detection, and failure
    notification for servers in the chain and to clients.
    """

    def setup(banks, clients, logfile):
        """Setup the master server.

        heads -- a dict of  of all the clients in the simulation.
        clients -- a set of DA ids of all the clients in the simulation.
        logfile -- relative path of the logging file
        """
        # {"JP": [JPServer], "Chase": [ChaseServer]}
        self.chain = dict()
        for bank in banks:
            self.chain[bank] = [Server(bank, s) for s in banks[bank]]

    def main():
        """
        Coordinate setup of bank chains then, monitor each chain until all
        servers fail.
        """
        setup_logfile()
        print_init_settings()
        # Wait for join chain messages
        # await
        output("All servers have failed, terminating...")

    def receive(msg=('ping', bankname), from_=server):
        """Update the ping count of the server."""
        output('Received ping: bank=%s, server=%s' % (bankname, server))
        if bankname in chain:
            for serv in chain[bankname]:
                if serv.pid == server:
                    serv.pings += 1
                    break

    def receive(msg=('joinChain', bankname), from_=new_tail):
        output('Received joinChain: bank=%s, server=%s' % (bankname, new_tail))
        tail = tail(bankname)
        if tail:
            mesg = ('extendChain', new_tail)
            output('Sending extendChain to current tail=%s' % tail)
            send(mesg, to=tail)
        else:
            output('Bank %s does not have a server chain!' % bankname)

    def receive(msg=('newTail', bankname), from_=new_tail):
        output('Received newTail: bank=%s, new tail=%s' % (bankname, new_tail))
        mesg = ('updateTail', (bankname, new_tail))
        output('Sending updateTail to all clients')
        send(mesg, to=clients)

    def setup_logfile():
        rootlog = logging.getLogger('')
        filelvl = logging.INFO
        fh = logging.FileHandler(logfile)
        formatter = logging.Formatter('[%(asctime)s]%(name)s: %(message)s')
        fh.setFormatter(formatter)
        fh.setLevel(filelvl)
        rootlog._filelvl = filelvl
        rootlog.addHandler(fh)

    def print_init_settings():
        output('*** Initial settings ***')
        output('*** Initial settings ***')

    def tail(bankid):
        """Find and return the tail of a bank's chain."""
        if bankid in chain and chain[bankid]:
            return chain[bankid][-1]
        else:
            return None


class Server:

    """Contains info about a bank server in a chain."""

    def __init__(self, bank, pid):
        self.bank = bank
        self.pid = pid
        self.pings = 0
