import random
import logging

const = import_da('const')

class Client(process):

    def setup(banks, conf, logfile):
        self.replies = set()
        self.num_received = 0
        self.num_sent = 0
        self.seq = 0
        self.rand_req = False
        self.valid_reqs = ['balance', 'deposit', 'withdrawal']
        # Parse conf
        self.reply_timeout = conf['reply_timeout']
        self.request_retries = conf['request_retries']
        self.resend_head = conf["resend_head"]
        if isinstance(conf['requests'], dict):
            self.rand_req = True
            self.num_req = conf['requests']['num_requests']
            self.prob_balance = conf['requests']['prob_balance']
            self.prob_deposit = conf['requests']['prob_deposit']
            self.prob_withdrawal = conf['requests']['prob_withdrawal']
            #self.prob_transfer = conf['requests']['prob_transfer']
        elif isinstance(conf['requests'], list):
            self.r_index = 0
            self.req_list = conf['requests']
        else:
            assert False, 'Error: Invalid conf format: Client "requests" is not a list or dict'

    def main():
        """
        Main execution of this process. Sequentially prepare a request (either
        randomly or from the specified request list), send the request, and
        log the response.
        """
        setup_logfile()
        print_init_settings()
        req = get_request()
        while req:
            prettyprint_request(req)
            reply = send_request(req)
            prettyprint_reply(reply)
            req = get_request()
        output("No more requests to send, terminating...")

    def receive(msg=('reply', (reqid, outcome, acc, bal)), from_=tail):
        replies.add((reqid, outcome, acc, bal))
        # LOG
        num_received += 1
        output('\tReceived message #%s: %s from=%s' % \
            (str(num_received), str(('reply', (reqid, outcome, acc, bal))), str(tail)))

    def send_request(request):
        reqid = request['reqid']
        if request['request'] == 'balance':
            return send_query(request['request'], reqid, request['account'], request['bank'])
        else:
            return send_update(request['request'], reqid, request['account'], request['amount'], request['bank'])

    def send_query(query, reqid, account, bank):
        retry = 0
        for i in range(request_retries):
            tail = banks[bank]['tail']
            if not tail:
                return None

            message = (query, (reqid, account))
            # LOG
            log_sent(message, tail)
            send(message, to=tail)
            if await(some((r_reqid, outcome, acc, bal) in replies, has=(r_reqid == reqid))):
                replies = set()
                return (outcome, acc, bal)
            elif timeout(reply_timeout):
                output('Request timed out after %s seconds' % reply_timeout)
                retry += 1
                if retry > request_retries:
                    output('Giving up after sending request %s times' % retry)
                    return None
                else:
                    output('Resending request')

    def send_update(update, reqid, account, amount, bank):
        retry = 0
        for i in range(request_retries):
            head = banks[bank]['head']
            if not head:
                return None

            message = (update, (reqid, account, amount))
            # LOG
            log_sent(message, head)
            send(message, to=head)
            if await(some((rreqid, outcome, acc, bal) in replies, has=(rreqid == reqid))):
                replies = set()
                return (outcome, acc, bal)
            elif timeout(reply_timeout):
                output('Request timed out after %s seconds' % reply_timeout)
                retry += 1
                if retry > request_retries:
                    output('Giving up after sending request %s times' % retry)
                    return None
                else:
                    output('Resending request')

    def gen_reqid(account, seq_num=None):
        """
        Generate a request identifier with the specified sequence
        number. If one is not provided then a unique sequence is
        used.
        NOTE: account is used because clients can used the same
              sequence number for different accounts.
        """
        if not seq_num:
            seq_num = seq
            seq += 1
        return (self.id, account, seq_num)

    def get_request():
        if rand_req:
            return gen_rand_req()
        else:
            if r_index >= len(req_list):
                return False
            req = req_list[r_index]
            # generate a reqID with the sequence number from the config
            req['reqid'] = gen_reqid(req['account'], req['seq_num'])
            # increment to the next request in the list
            r_index += 1
            return req

    def gen_rand_req():
        # We ran out of requests
        if num_req <= 0:
            return False
        num_req -= 1
        # gen random weighted request type
        num = random.random()
        if num < prob_balance:
            rtype = 'balance'
        elif num < prob_balance + prob_deposit:
            rtype = 'deposit'
        else:
            rtype = 'withdrawal'

        request = dict()
        request['request'] = rtype
        request['bank'] = random.choice([b for b in banks])
        request['account'] = str(random.randrange(0, 10001))
        request['amount'] = "%.2f" % random.uniform(0, 10001)
        request['reqid'] = gen_reqid(request['account'])
        return request

    def setup_logfile():
        rootlog = logging.getLogger('')
        filelvl = logging.INFO
        fh = logging.FileHandler(logfile)
        formatter = logging.Formatter('[%(asctime)s]%(name)s: %(message)s')
        fh.setFormatter(formatter)
        fh.setLevel(filelvl)
        rootlog._filelvl = filelvl
        rootlog.addHandler(fh)

    def print_init_settings():
        output('*** Initial settings ***')

        if rand_req:
            output('Shutting down after sending %s random messages' % num_req)
            output('Probabilities: %s%% balance, %s%% deposit, %s%% withdrawal'\
                    % (prob_balance, prob_deposit, prob_withdrawal))
            output('Sending requests randomly to %s' % ' or '.join(banks.keys()))
        else:
            output('Shutting down after sending %s messages from config' % \
                    len(req_list))
        output('Timeout before resending a request is %s seconds' % reply_timeout)
        output('Will re-send a request at most %s times' % request_retries)
        if resend_head:
            output('Will re-send outstanding request to new head')
        else:
            output('Will NOT re-send outstanding request to new head')
        output('*** Initial settings ***')

    def log_sent(message, dest):
        num_sent += 1
        output('\tSending message #%s: %s to=%s' % \
            (str(num_sent), str(message), str(dest)))

    def prettyprint_request(req):
        req_type = req['request']
        account = req['account']
        bank_n = req['bank']

        if req_type == 'balance':
            output('Sending request: %s, get balance of account %s' % (bank_n, account))
        else:
            amount = req['amount']
            output('Sending request: %s, %s $%s account %s' % \
                (bank_n, req_type ,amount, account))

    def prettyprint_reply(reply):
        if reply:
            outcome, acc, bal = reply
            if outcome == const.PROCESSED:
                output('Reply: PROCESSED request, account %s, current balance $%s\n'\
                        % (acc, bal))
            elif outcome == const.INCONSISTENT:
                output('Reply: INCONSISTENT WITH HISTORY, account %s, current balance $%s\n'\
                        % (acc, bal))
            elif outcome == const.INSUFFICIENT_FUNDS:
                output('Reply: INSUFFICIENT FUNDS, account %s, current balance $%s\n'\
                        % (acc, bal))
            else:
                output('Unkown outcome %s, account %s, balance $%s\n' % (outcome, acc, bal))
        else:
            output('Request could not be processed at this time.\n')
