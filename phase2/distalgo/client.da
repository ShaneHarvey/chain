import sys
import time


# DistAlgo code for chain replication client, based on the pseudocode in
# [vanRenesse2010Replication, Figure 2.5]
class Client(process):

    def setup(nothing):
        self.servers = [1,2,3]
        self.T = 3
        self.responses = set()
        self.bank_name = 'Chase'
        self.account = '123'
        self.seq = 0

    def receive(msg=('failure', p), from_=master):
        servers.remove(p)

    def receive(msg=('response', r), from_=tail):
        responses.add((tail,r))

    def send_update(update, op):
        uid = gen_uid()
        while True:
            if servers == set():
                return 'unavailable'
            head = max(servers)
            send((update, (uid,op)), to=head)
            if await((_, (_uid, resp)) in responses):
                return resp
            elif timeout(T):
                pass
    
    def gen_uid():
        seq += 1
        return ".".join([bank_name, account, str(id(1)), str(seq)])

    def main():
        for x in range(10):
            reply = send_update('deposit', '40.00')
            output('reply %s' % reply)
            time.sleep(1)

class Server(process):

    def setup(status):
        self.predecessor  = ''
        self.sucessor = ''
        self.history = set()
        self.bank_name = 'Chase'
        self.bank = dict()

    def main():
        pass

    def receive(msg=('balance', (uid,q)), from_=client):
        # get account num from the uid
        acc = uid[2]
        balance = get_balance(acc)
        send(('response', (uid, balance)), to=client)

    def receive(msg=('withdrawl', (uid,w)), from_=client):
        pass

    def receive(msg=('deposit', (uid,w)), from_=client):
        pass

    def get_balance(account_num):
        balance = 0
        if account_num in bank:
            balance = bank[account_num]
        else:
            bank[account_num] = 0
        return balance

def main():
    """Usage: client.da [num_clients]
    """
    nclients = int(sys.argv[1]) if len(sys.argv) > 1 else 1
    config(clock='Lamport')
    clients = new(Client, num=nclients)
    # TODO: Somehow pass chain of servers to the setup method
    setup(clients, [1])
    start(clients)
