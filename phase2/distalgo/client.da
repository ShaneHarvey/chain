import sys
import time
# Used as a 'bank'
from collections import defaultdict
# Decimal is used to store monetary values precisely
from decimal import Decimal

# DistAlgo code for chain replication client, based on the pseudocode in
# [vanRenesse2010Replication, Figure 2.5]
class Client(process):

    def setup(servers):
        # timeout and retransmit after 3 seconds
        # This is the only timeout in the design
        self.T = 3
        self.responses = set()
        self.seq = 0

    def receive(msg=('response', r), from_=tail):
        responses.add((tail,r))

    def send_update(update, ammount, bank, account):
        uid = gen_uid(bank, account)
        while True:
            if servers == set():
                return 'unavailable'
            #head = max(servers)
            send((update, (uid, ammount)), to=servers)
            if await(some((_, (ruid, r)) in responses, has=(ruid == uid))):
                return r
            elif timeout(T):
                pass

    def gen_uid(bank, account):
        seq += 1
        return (id(0), bank, account, seq)

    def main():
        for x in range(10):
            reply = send_update('deposit', '40.00', 'Chase', '001')
            output('reply %s' % reply)
            time.sleep(1)
        time.sleep(3)
        send(('Done',), to=servers)


class Server(process):

    def setup(servers):
        # TODO: Replace with implict place in servers list?
        self.predecessor  = None
        self.sucessor = None
        self.is_head = True
        self.is_tail = True
        self.history = set()
        self.bank_name = 'Chase'
        # Keys not in
        self.bank = defaultdict(int)

    def set_predecessor(new_pred):
        self.predecessor = new_pred
        is_head = False

    def set_sucessor(new_suc):
        self.sucessor = new_suc
        self.is_tail = False

    def main():
        await(received(('Done',)))
        output("Terminating..")

    def receive(msg=('balance', (uid, q)), from_=client):
        # get account num from the uid
        acc = uid[2]
        send(('response', (uid, bank[acc])), to=client)

    def receive(msg=('withdrawl', (uid, ammount)), from_=client):
        pass

    def receive(msg=('deposit', (uid, ammount)), from_=client):
        # get account num from the uid
        acc = uid[2]
        # Deposit his $$$
        bank[acc] += Decimal(ammount)
        output("Sending response uid")
        output(uid)
        send(('response', (uid, bank[acc])), to=client)


def main():
    """Usage: client.da [num_clients]
    """
    nclients = int(sys.argv[1]) if len(sys.argv) > 1 else 1
    config(clock='Lamport')
    clients = new(Client, num=nclients)
    # TODO: Somehow pass chain of servers to the setup method
    server = new(Server, num=1)
    setup(server, [None])
    for c in clients:
        setup(c, [server])
    start(server)
    start(clients)
