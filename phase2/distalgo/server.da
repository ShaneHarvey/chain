# Used as a 'bank'
from collections import defaultdict
# Decimal is used to store monetary values precisely
from decimal import Decimal


class Server(process):

    def setup(servers, bank_name):
        # TODO: Replace with implict place in servers list?
        self.predecessor  = None
        self.sucessor = None
        self.is_head = True
        self.is_tail = True
        self.history = set()
        # Keys not in
        self.bank = defaultdict(int)
        setup_chain(servers)

    def setup_chain(servers):
        slen = len(servers)
        i = servers.index(self.id)
        if i < slen - 1:
            set_sucessor(servers[i + 1])
        if i > 0:
            set_predecessor(servers[i - 1])
        if not predecessor:
            output("I am head: %s" % self.id)

    def set_predecessor(new_pred):
        self.predecessor = new_pred
        is_head = False

    def set_sucessor(new_suc):
        self.sucessor = new_suc
        self.is_tail = False

    def main():
        # wait for 10 seconds
        if await(0):
            output("Terminating..")
        elif timeout(10):
            output("Terminating..")

    def receive(msg=('balance', (uid, q)), from_=client):
        # Only tail replies to clients
        if not is_tail:
            return
        # get account num from the uid
        acc = uid[2]
        send(('response', (uid, bank[acc])), to=client)

    def receive(msg=('withdrawl', (uid, amount)), from_=p):
        # If we are not the head server ignore client updates
        if not is_head and p not in servers:
            return
        # get account num from the update id
        acc = uid[2]
        # Deposit his $$$
        bank[acc] -= Decimal(amount)
        # forward the update
        fwd_update('withdrawl', uid, amount, bank[acc])

    def receive(msg=('deposit', (uid, amount)), from_=p):
        # If we are not the head server ignore client updates
        if not is_head and p not in servers:
            return
        # get account num from the update id
        acc = uid[2]
        # Deposit his $$$
        bank[acc] += Decimal(amount)
        # forward the update
        fwd_update('deposit', uid, amount, bank[acc])

    def fwd_update(update, uid, amount, new_balance):
        if is_tail:
            # Reply to the client
            output('Sending response to client')
            send(('response',(uid, new_balance)), to=uid[0])
        else:
            # Forward the update to successor
            output('Forwarding update to successor')
            send((update, (uid, amount)), to=sucessor)
